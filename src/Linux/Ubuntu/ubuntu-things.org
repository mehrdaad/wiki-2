#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Ubuntu things
#+OPTIONS: num:nil H:2

* disable hud-service
1.  removes - the execute mode 
#+begin_src sh
# 64 bit Users
sudo chmod -x  /usr/lib/x86_64-linux-gnu/hud/hud-service
sudo killall hud-service
# 32 bit Users
sudo chmod -x /usr/lib/indicator-appmenu/hud-service
sudo killall hud-service
#+end_src

OR 2. Optimize it
The HUD is related to the Unity Launcher. For example it analyzes the
files you are using and offers them when you press =Super=.

installing Compiz Config Settings Manager (ccsm) and disabled all
effects and set "Enable Low Graphics Mode" in "Ubuntu Unity Plugin":

#+begin_src sh
sudo apt-get install compizconfig-settings-manager
ccsm
#+end_src

* Configuring Secure Boot after upgrade
#+begin_src sh
Your system has UEFI Secure Boot enabled. UEFI Secure Boot is not compatible with the use of third-party drivers.

The system will assist you in disabling UEFI Secure Boot. To ensure that this change is being made by you as an authorized user, and not by an attacker, you must choose a password now and then use the same password after reboot to confirm the change.

If you choose to proceed but do not confirm the password upon reboot, Ubuntu will still be able to boot on your system but these third-party drivers will not be available for your hardware.
#+end_src

three way choice: 
+ turn off secure boot (fairly easy), 
+ lose 3rd party driver functionality (unacceptable)
+ or sign the drivers yourself (super complicated).

You are correct. The Canonical Kernel Team has enabled
=EFI_SECURE_BOOT_SIG_ENFORCE= in the new 3.19 Ubuntu kernel.

That prevents from loading unsigned third party modules if UEFI Secure
Boot is enabled.

The easiest way to fix this issue is to *disable Secure Boot* in UEFI
(BIOS) settings.[fn:1]

In most cases you can get into UEFI settings using grub menu. Press
ESC button on booting, get into grub menu and select System Setup.
Secure Boot option should be in "Security" or "Boot" section of the
UEFI.


You can get into UEFI directly, but it depends on your hardware. Read
your computer manual to see how to get there. It may be Del, or F2 on
boot, or something else.

An alternative way is to disable Secure Boot using =mokutil=.

#+begin_src sh
sudo apt install mokutil
sudo mokutil --disable-validation
#+end_src

It will require to create a password. The password should be at least
8 charachters long. After you reboot, UEFI will ask if you want to
change security settings. Choose "Yes".

Then you will be asked to enter the previously created password. Some
UEFI firmware asks not for the full password, but to enter some
charachters of it, like 1st, 3rd, etc. Be carefull. Some people do not
undrestand this.


Disabling Secure Boot is also *Dell's* recommended solution:
http://en.community.dell.com/techcenter/os-applications/f/4613/p/19985774/20925748#20925748

** sign[fn:2]
As Anthony Wong says, when you install a DKMS package you are
compiling the package yourself, thus, Canonical cannot sign the module
for you.

However, you can definitely use Secure Boot, however this is exactly
the use case where Secure Boot is trying to protect you from yourself
because it cannot know whether you trust a module or don't.


*By default*, there is a Platform Key (PK) on your UEFI machine, which
is the ultimately trusted Certificate Authority for loading code in
your processor.

GRUB, or shim, or other *boot mechanisms can be digitally signed* by a
KEK which is trusted by the root CA (PK), and thus your computer can,
without any configuration, boot software like Ubuntu Live USB/DVDs.


On Ubuntu 16.04 the kernel is built with ~CONFIG_MODULE_SIG_FORCE=1~,
which means that *the kernel will enforce modules to be signed by a
trusted key* in the platform. Take into consideration that the UEFI 
platform by default contains a PK that you do not have any control
over, and thus you cannot sign binaries with a key recognized by your
own machine.

Some people bash and rant against that, but there is really no better
way (from a security standpoint) than it being yourself who enrolls
the new key you want.

If your boot system uses shim, you can use something called a Machine
Owner's Key database, and *enroll your key as a MOK* (You can do that
with mokutil). If you don't, you can also enroll your key *in the UEFI*
database as a signing key.

After you enroll your key, you can *sign your DKMS-built package with
your MOK* (there should be a perl script at /usr/src/kernels/$(uname
-r)/scripts/sign-file), and *after it is signed, you can load it into
the kernel*.

Granted, someone should make more visual instructions on this, and
probably even make a wizard or a better DKMS standard to allow keys to
be taken into consideration, but this is what we have as of now.

* empty the trash using terminal
#+begin_src sh
rm -rf ~/.local/share/Trash/*
#+end_src
* How to Enable Nautilus Typeahead Find in Ubuntu 18.04 LTS
#+begin_src sh
sudo add-apt-repository ppa:lubomir-brindza/nautilus-typeahead
sudo apt dist-upgrade
# Review the changes the command proposes and, if youâ€™re happy to proceed,
nautilus -r
#+end_src
** Undo the change
#+begin_src sh
sudo apt install ppa-purge
sudo ppa-purge ppa:lubomir-brindza/nautilus-typeahead
#+end_src

* AMD Ryze segment test
+ https://github.com/suaefar/ryzen-test
+ https://github.com/Oxalin/ryzen-test
* Overclock Your AMD Ryzen CPU On Linux
+ https://linuxconfig.org/how-to-overclock-your-amd-ryzen-cpu-on-linux

* Conky: Monitoring CPU freq in real time
+ https://askubuntu.com/questions/1021432/monitoring-cpu-freq-in-real-time

* cc

#+begin_src sh

#+end_src

* Footnotes

[fn:1]
http://askubuntu.com/questions/762254/why-do-i-get-required-key-not-available-when-install-3rd-party-kernel-modules/762255#762255

[fn:2] http://askubuntu.com/questions/755238/why-disabling-secure-boot-is-enforced-policy-when-installing-3rd-party-modules




