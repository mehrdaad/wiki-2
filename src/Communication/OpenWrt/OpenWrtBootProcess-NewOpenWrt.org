#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: OpenWrt Boot Process (New OpenWrt)
#+OPTIONS: num:nil H:2



一个boot log的例子:
#+begin_src sh
[    2.602573] VFS: Mounted root (squashfs filesystem) readonly on device 31:2.
[    2.610535] Freeing unused kernel memory: 224K (80428000 - 80460000)
[    3.912151] init: Console is alive
[    3.916056] init: - watchdog -
[    6.994992] init: - preinit -
Press the [f] key and hit [enter] to enter failsafe mode
Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level
Before mount_root
[   10.352510] jffs2: notice: (401) jffs2_build_xattr_subsystem: complete building xattr subsystem, 0 of xdatum (0 unchecked, 0 orphan) and 0 of xref (0 dead, 0 orphan) found.
[   10.369525] mount_root: switching to jffs2 overlay
[   10.540372] procd: - early -
[   10.543495] procd: - watchdog -
[   11.303217] procd: - ubus -
[   12.307928] random: ubusd: uninitialized urandom read (4 bytes read, 53 bits of entropy available)
[   12.439119] procd: - init -
Please press Enter to activate this console.
#+end_src

* Overview
1. Boot
   + Bootloader 比如U-Boot, 配置底层硬件,加载Linux kernel 和 device
     tree blob, 最后传入kernel cmdline跳转到Linux kernel image.
   + 高通的Secure boot会复杂点,先PBL(Primary Boot Loader), 然后
     SBL1(Second BootLoader stage 1) 初始化buses、DDR、clocks等, SBL1
     移交运行控制权给QSEE。QSEE建立安全运行环境，配置xPU，支持fuse, 之
     后才转入APPSBL即为BootLoader, 跳转到HLOS(High LevelOperating
     System) 即为Linux kernel.

2. Kernel init Hareware

   Linux Kernel 将继续初始化外围硬件.

3. Kernel -> Filesystem

   Mount the root filesystem (通过kernel cmdline中的诸如参数 =root==, =rootfstype==).

4. Kernel -> Init Process

   最后kernel启动 =init= 进程 (PID 1).

5. Run preinit

   再procd接管前, preinit会对系统做一些前期的初始工作.

6. Run procd
   
   一旦preinit完成,它将exec procd. 这将用procd取代原来pid1的init进程.
   watchdog的file descriptor不会被关闭, 而是传入到procd进程.

OpenWrt系统从第4步开始. 在OpenWrt系统中, 这个init初始化进程不是普通
Linux中一个初始进程, 而是专为OpenWrt写的一个shell脚本.

* preinit
** =/etc/preinit=
无论Linux什么版本, OpenWrt都会有类似如下的patch,

#+INCLUDE: "./Files/921-use_preinit_as_init.patch" src c


** =/sbin/init=

** 回到  =/etc/preinit=

* watchdog

* procd

** =STATE_EARLY=

** =STATE_UBUS=

** =STATE_INIT=

** =STATE_RUNNING=




* cc
#+begin_src sh

#+end_src



#+begin_src c++

#+end_src
